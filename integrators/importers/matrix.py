# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/importers.MatrixClient.ipynb (unless otherwise specified).

__all__ = ['MatrixClient']

# Cell
from hashlib import sha256
from ..data.schema import *
from ..imports import *
from nbdev.showdoc import show_doc
import docker

# Cell
class MatrixClient:

    def __init__(self, url, username, token):
        self.url = url # Matrix url
        self.username = username # username of Matrix account
        self.token = token # token of Matrix account

        assert self.url is not None
        assert self.username is not None
        assert self.token is not None

    def get_joined_rooms(self):
        """List all rooms the user joined"""
        try:
            result = requests.get(f"{self.url}/_matrix/client/r0/joined_rooms?access_token={self.token}")
            if result.status_code != 200:
                print(result, result.content)
                return False
            else:
                json = result.json()
                res = json["joined_rooms"] # only rooms with "joined" status
                return res
        except requests.exceptions.RequestException as e:
            print(e)
            return None

    def get_joined_members(self, room_id):
        """List all joined members in a room"""
        try:
            result = requests.get(f"{self.url}/_matrix/client/r0/rooms/{room_id}/joined_members?access_token={self.token}")
            if result.status_code != 200:
                print(result, result.content)
                return False
            else:
                json = result.json()
                res = json["joined"] # only members with "joined" status
                return res
        except requests.exceptions.RequestException as e:
            print(e)
            return None

    def send_messages(self, room_id, body):
        """Send a message to a joined room"""
        try:
            result = requests.post(f"{self.url}/_matrix/client/r0/rooms/{room_id}/send/m.room.message?access_token={self.token}", json=body)
            if result.status_code != 200:
                print(result, result.content)
                return None
            else:
                json = result.json()
                event_id = json["event_id"]
                return event_id
        except requests.exceptions.RequestException as e:
            print(e)
            return None

    def get_event_context(self, room_id, event_id):
        """Fetch events after a certain event"""
        try:
            # limit to context event is set to 1
            result = requests.get(f"{self.url}/_matrix/client/r0/rooms/{room_id}/context/{event_id}?limit=1&access_token={self.token}")
            if result.status_code != 200:
                print(result, result.content)
                return None
            else:
                json = result.json()
                res = json["events_after"] # only show events after the specific event
                return res
        except requests.exceptions.RequestException as e:
            print(e)
            return None

    def sync_events(self, next_batch):
        """Fetch all events in a room in a batch"""
        try:
            result = requests.get(f"{self.url}/_matrix/client/r0/sync?since={next_batch}&access_token={self.token}")
            if result.status_code != 200:
                print(result, result.content)
                return None
            else:
                json = result.json()
                return json
        except requests.exceptions.RequestException as e:
            print(e)
            return None

    def get_profile(self, user_id):
        """Fetch profile of a specific user"""
        try:
            result = requests.get(f"{self.url}/_matrix/client/r0/profile/{user_id}")
            if result.status_code != 200:
                print(result, result.content)
                return None
            else:
                json = result.json()
                return json
        except requests.exceptions.RequestException as e:
            print(e)
            return None

    def get_room_state(self, room_id):
        """Fetch status of a room"""
        try:
            result = requests.get(f"{self.url}/_matrix/client/r0/rooms/{room_id}/state?access_token={self.token}")
            if result.status_code != 200:
                print(result, result.content)
                return None
            else:
                json = result.json()
                return json
        except requests.exceptions.RequestException as e:
            print(e)
            return None

    def download_file(self, uri):
        """Download media files"""
        try:
            result = requests.get(f"{self.url}/_matrix/media/r0/download/{HOSTNAME}/{uri}")
            if result.status_code != 200:
                print(result, result.content)
                return None
            else:
                file = result.content
                return file
        except requests.exceptions.RequestException as e:
            print(e)
            return None