# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/indexers.indexer.ipynb (unless otherwise specified).

__all__ = ['Indexer', 'IndexerRun']

# Cell
from ..data.schema import Item

# Cell
class Indexer(Item):
    def __init__(self, properties, edges=None):
        super().__init__(properties, edges)

    def populate(self, api, updated_items, new_nodes, edges=False):

        for item in new_nodes:
            item.update(api, edges=False)
        if edges:
            for item in new_nodes:
                item.update_edges(api)

        for item in updated_items:
            item.update(api)


class IndexerRun(Item):

    def __init__(self, properties, edges=None):
        super().__init__(properties, edges)

    def get_data(self, api):
        if "targetDataType" in self.properties:
            dtype = self.get_property("targetDataType")
        else:
            print("No targetDataType defined")
            return None

        # get all items with the specified type
        data = api.search_by_fields({"_type": dtype})
        return [api.local_db.create(Node(d)) for d in data]

    def set_progress(self, api, progress):
        self.set_property("progress", progress)
        self.update(api, edges=False)