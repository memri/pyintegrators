# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/indexers.indexer.ipynb (unless otherwise specified).

__all__ = ['IndexerBase', 'IndexerData', 'get_indexer_run_data', 'test_registration', 'POD_FULL_ADDRESS_ENV',
           'RUN_UID_ENV', 'POD_SERVICE_PAYLOAD_ENV', 'DATABASE_KEY_ENV', 'OWNER_KEY_ENV', 'run_indexer',
           'run_integrator_from_run_uid', 'run_integrator', 'run_indexer', 'run_integrator_from_run_uid',
           'run_integrator']

# Cell
from ..data.schema import *
from ..pod.client import PodClient, DEFAULT_POD_ADDRESS
from ..imports import *

# Cell
POD_FULL_ADDRESS_ENV    = 'POD_FULL_ADDRESS'
RUN_UID_ENV             = 'RUN_UID'
POD_SERVICE_PAYLOAD_ENV = 'POD_SERVICE_PAYLOAD'
DATABASE_KEY_ENV        = 'databaseKey'
OWNER_KEY_ENV           = 'ownerKey'


class IndexerBase(Indexer):

    def __init__(self, indexerClass=None, *args, **kwargs):
        if indexerClass is None: indexerClass=self.__class__.__name__
        super().__init__(indexerClass=indexerClass, *args, **kwargs)

    def populate(self, api, updated_items, new_nodes, edges=False):
        for item in new_nodes:
            item.update(api, edges=False)
        if edges:
            for item in new_nodes:
                item.update_edges(api)

        for item in updated_items:
            item.update(api)

class IndexerData():
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            self.__setattr__(k, v)

    def __repr__(self):
        return f"IndexerData \n{self.__dict__}"


def get_indexer_run_data(client, indexer_run):
    if indexer_run.targetDataType is None:
        print("No targetDataType defined")
        return None

    # get all items with the specified type
    else:
        return client.search_by_fields({"_type": indexer_run.targetDataType})

def test_registration(integrator):
    """Check whether an integrator is registred. Registration is necessary to be able to load the right indexer
    when retrieving it from the database."""
    import integrators.integrator_registry as registry
    assert integrator.__name__ in dir(registry)

# Cell
# export
def run_indexer(indexer_run, client):
    indexer = indexer_run.indexer[0]
    data = indexer.get_data(client, indexer_run)
    updated_items, new_items = indexer.index(data, indexer_run, client)
    indexer.populate(client, updated_items, new_items)

def run_integrator_from_run_uid(run_uid, client):
    run = client.get(run_uid)

    if isinstance(run, IndexerRun):
        run_indexer(run, client)
    else:
        raise NotImplementedError(f"Cannot execute item of type {run}")

# Cell

def run_integrator(environ=None, pod_full_address=None, integrator_run_uid=None, database_key=None, owner_key=None, verbose=False):
    """Runs an integrator, you can either provide the run settings as parameters to this function (for local testing)
    or via environment variables (this is how the pod communicates with integrators)."""
    params = [pod_full_address, integrator_run_uid, database_key, owner_key]

    if all([p is None for p in params]):
        try:
            print("Reading run parameters from environment variables")
            pod_full_address    = environ.get(POD_FULL_ADDRESS_ENV, DEFAULT_POD_ADDRESS)
            integrator_run_uid  = int(environ[RUN_UID_ENV])
            pod_service_payload = json.loads(environ[POD_SERVICE_PAYLOAD_ENV])

            database_key = pod_service_payload[DATABASE_KEY_ENV]
            owner_key    = pod_service_payload[OWNER_KEY_ENV]

        except KeyError as e:
            print(f"Environmentvariable {e} not found, exiting")
            return
    else:
        assert not (None in params), f"Defined some params to run indexer, but not all. Missing {[p for p in params if p is None]}"
    if verbose:
        for name, val in [("pod_full_address", pod_full_address), ("integrator_run_uid", integrator_run_uid),
                  ("database_key", database_key), ("owner_key", owner_key)]:
            print(f"{name}={val}")

    client = PodClient(url=pod_full_address, database_key=database_key, owner_key=owner_key)
    run_integrator_from_run_uid(integrator_run_uid, client)


# Cell
# export
def run_indexer(indexer_run, client):
    indexer = indexer_run.indexer[0]
    data = indexer.get_data(client, indexer_run)
    updated_items, new_items = indexer.index(data, indexer_run, client)
    indexer.populate(client, updated_items, new_items)

def run_integrator_from_run_uid(run_uid, client):
    run = client.get(run_uid)

    if isinstance(run, IndexerRun):
        run_indexer(run, client)
    else:
        raise NotImplementedError

# Cell

def run_integrator(environ=None, pod_full_address=None, integrator_run_uid=None, database_key=None, owner_key=None):
    """Runs an integrator, you can either provide the run settings as parameters to this function (for local testing)
    or via environment variables (this is how the pod communicates with integrators)."""
    params = [pod_full_address, integrator_run_uid, database_key, owner_key]

    if all([p is None for p in params]):
        try:
            pod_full_address    = environ.get(POD_FULL_ADDRESS_ENV, DEFAULT_POD_ADDRESS)
            integrator_run_uid  = environ[RUN_UID_ENV]
            pod_service_payload = json.loads(environ[POD_SERVICE_PAYLOAD_ENV])

            database_key = pod_service_payload[DATABASE_KEY_ENV]
            owner_key    = pod_service_payload[OWNER_KEY_ENV]

        except KeyError as e:
            print(f"Environmentvariable {e} not found, exiting")
            return
    else:
        assert not (None in params), f"Defined some params to run indexer, but not all. Missing {[p for p in params if p is None]}"

    client = PodClient(url=pod_full_address, database_key=database_key, owner_key=owner_key)
    run_integrator_from_run_uid(integrator_run_uid, client)
